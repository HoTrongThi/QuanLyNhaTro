package model;

import java.math.BigDecimal;
import java.sql.Timestamp;

/**
 * L·ªõp Model cho D·ªãch v·ª• (Phi√™n b·∫£n 2.0)
 * ƒê·∫°i di·ªán cho c√°c d·ªãch v·ª• trong h·ªá th·ªëng qu·∫£n l√Ω ph√≤ng tr·ªç
 * H·ªó tr·ª£ 5 lo·∫°i d·ªãch v·ª•: Mi·ªÖn ph√≠, Theo th√°ng, Theo ch·ªâ s·ªë, Theo ƒë·∫ßu ng∆∞·ªùi, Theo ph√≤ng
 * H·ªó tr·ª£ c·∫•u h√¨nh t√≠nh to√°n linh ho·∫°t (b·∫≠c thang, gi√° c·ªë ƒë·ªãnh, v.v.)
 * 
 * @author H·ªá th·ªëng Qu·∫£n l√Ω Ph√≤ng tr·ªç
 * @version 2.0
 * @since 2025
 */
public class Service {
    
    // ==================== ENUM ƒê·ªäNH NGHƒ®A LO·∫†I D·ªäCH V·ª§ ====================
    
    /**
     * Enum ƒë·ªãnh nghƒ©a c√°c lo·∫°i d·ªãch v·ª•
     */
    public enum ServiceType {
        FREE("Mi·ªÖn ph√≠", "üÜì"),
        MONTHLY("Theo th√°ng", "üìÖ"),
        METER_READING("Theo ch·ªâ s·ªë", "üìä"),
        PER_PERSON("Theo ƒë·∫ßu ng∆∞·ªùi", "üë•"),
        PER_ROOM("Theo ph√≤ng", "üè†");
        
        private final String displayName;
        private final String icon;
        
        ServiceType(String displayName, String icon) {
            this.displayName = displayName;
            this.icon = icon;
        }
        
        public String getDisplayName() { return displayName; }
        public String getIcon() { return icon; }
    }
    
    // ==================== C√ÅC THU·ªòC T√çNH C∆† B·∫¢N ====================
    
    /** ID duy nh·∫•t c·ªßa d·ªãch v·ª• (Primary Key) */
    private int serviceId;
    
    /** T√™n d·ªãch v·ª• (v√≠ d·ª•: "ƒêi·ªán sinh ho·∫°t", "Internet WiFi", "V·ªá sinh chung") */
    private String serviceName;
    
    /** ƒê∆°n v·ªã t√≠nh (v√≠ d·ª•: "kWh", "m¬≥", "th√°ng", "ng∆∞·ªùi", "ph√≤ng") */
    private String unit;
    
    /** Gi√° tr√™n m·ªói ƒë∆°n v·ªã (VNƒê) - C√≥ th·ªÉ l√† 0 cho d·ªãch v·ª• mi·ªÖn ph√≠ */
    private BigDecimal pricePerUnit;
    
    // ==================== C√ÅC THU·ªòC T√çNH M·ªöI ====================
    
    /** Lo·∫°i d·ªãch v·ª• */
    private ServiceType serviceType;
    
    /** C·∫•u h√¨nh t√≠nh to√°n (JSON format) */
    private String calculationConfig;
    
    /** ID Admin qu·∫£n l√Ω d·ªãch v·ª• n√†y (null = Super Admin ho·∫∑c d·ªãch v·ª• chung) */
    private Integer managedByAdminId;
    
    
    // ==================== C√ÅC CONSTRUCTOR ====================
    
    /**
     * Constructor m·∫∑c ƒë·ªãnh
     */
    public Service() {
        this.serviceType = ServiceType.MONTHLY; // M·∫∑c ƒë·ªãnh
    }
    
    /**
     * Constructor ƒë·ªÉ t·∫°o d·ªãch v·ª• m·ªõi (phi√™n b·∫£n c≈© - t∆∞∆°ng th√≠ch ng∆∞·ª£c)
     * 
     * @param serviceName t√™n d·ªãch v·ª•
     * @param unit ƒë∆°n v·ªã t√≠nh
     * @param pricePerUnit gi√° tr√™n ƒë∆°n v·ªã
     */
    public Service(String serviceName, String unit, BigDecimal pricePerUnit) {
        this();
        this.serviceName = serviceName;
        this.unit = unit;
        this.pricePerUnit = pricePerUnit;
    }
    
    /**
     * Constructor ƒë·ªÉ t·∫°o d·ªãch v·ª• m·ªõi (phi√™n b·∫£n 2.0)
     * 
     * @param serviceName t√™n d·ªãch v·ª•
     * @param unit ƒë∆°n v·ªã t√≠nh
     * @param pricePerUnit gi√° tr√™n ƒë∆°n v·ªã
     * @param serviceType lo·∫°i d·ªãch v·ª•
     * @param calculationConfig c·∫•u h√¨nh t√≠nh to√°n
     */
    public Service(String serviceName, String unit, BigDecimal pricePerUnit, 
                   ServiceType serviceType, String calculationConfig) {
        this();
        this.serviceName = serviceName;
        this.unit = unit;
        this.pricePerUnit = pricePerUnit;
        this.serviceType = serviceType;
        this.calculationConfig = calculationConfig;
    }
    
    /**
     * Constructor ƒë·∫ßy ƒë·ªß (t·ª´ database)
     */
    public Service(int serviceId, String serviceName, String unit, BigDecimal pricePerUnit,
                   ServiceType serviceType, String calculationConfig) {
        this.serviceId = serviceId;
        this.serviceName = serviceName;
        this.unit = unit;
        this.pricePerUnit = pricePerUnit;
        this.serviceType = serviceType;
        this.calculationConfig = calculationConfig;
    }
    
    // ==================== GETTERS AND SETTERS ====================
    
    // Thu·ªôc t√≠nh c∆° b·∫£n
    public int getServiceId() { return serviceId; }
    public void setServiceId(int serviceId) { this.serviceId = serviceId; }
    
    public String getServiceName() { return serviceName; }
    public void setServiceName(String serviceName) { this.serviceName = serviceName; }
    
    public String getUnit() { return unit; }
    public void setUnit(String unit) { this.unit = unit; }
    
    public BigDecimal getPricePerUnit() { return pricePerUnit; }
    public void setPricePerUnit(BigDecimal pricePerUnit) { this.pricePerUnit = pricePerUnit; }
    
    // Thu·ªôc t√≠nh m·ªõi
    public ServiceType getServiceType() { return serviceType; }
    public void setServiceType(ServiceType serviceType) { this.serviceType = serviceType; }
    
    /**
     * Set service type from string (for database compatibility)
     */
    public void setServiceType(String serviceTypeStr) {
        if (serviceTypeStr != null) {
            try {
                this.serviceType = ServiceType.valueOf(serviceTypeStr.toUpperCase());
            } catch (IllegalArgumentException e) {
                this.serviceType = ServiceType.MONTHLY; // Default fallback
            }
        }
    }
    
    /**
     * Get service type as string (for database compatibility)
     */
    public String getServiceTypeString() {
        return serviceType != null ? serviceType.name() : ServiceType.MONTHLY.name();
    }
    
    public String getCalculationConfig() { return calculationConfig; }
    public void setCalculationConfig(String calculationConfig) { this.calculationConfig = calculationConfig; }
    
    public Integer getManagedByAdminId() { return managedByAdminId; }
    public void setManagedByAdminId(Integer managedByAdminId) { this.managedByAdminId = managedByAdminId; }
    
    // ==================== UTILITY METHODS ====================
    
    /**
     * Ki·ªÉm tra xem d·ªãch v·ª• c√≥ mi·ªÖn ph√≠ kh√¥ng
     */
    public boolean isFree() {
        return serviceType == ServiceType.FREE;
    }
    
    /**
     * L·∫•y t√™n hi·ªÉn th·ªã ƒë·∫ßy ƒë·ªß v·ªõi icon
     */
    public String getDisplayNameWithIcon() {
        return serviceType.getIcon() + " " + serviceName;
    }
    
    /**
     * L·∫•y m√¥ t·∫£ ng·∫Øn v·ªÅ c√°ch t√≠nh ph√≠
     */
    public String getPricingDescription() {
        switch (serviceType) {
            case FREE:
                return "Mi·ªÖn ph√≠";
            case MONTHLY:
                return pricePerUnit + "‚Ç´/th√°ng";
            case METER_READING:
                return "Theo ch·ªâ s·ªë " + (unit != null ? unit : "");
            case PER_PERSON:
                return pricePerUnit + "‚Ç´/ng∆∞·ªùi/th√°ng";
            case PER_ROOM:
                return pricePerUnit + "‚Ç´/ph√≤ng/th√°ng";
            default:
                return "Ch∆∞a x√°c ƒë·ªãnh";
        }
    }
    
    // ==================== OBJECT METHODS ====================
    
    @Override
    public String toString() {
        return "Service{" +
                "serviceId=" + serviceId +
                ", serviceName='" + serviceName + '\'' +
                ", serviceType=" + serviceType +
                ", unit='" + unit + '\'' +
                ", pricePerUnit=" + pricePerUnit +

                '}';
    }
    
    // Equals and HashCode
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        
        Service service = (Service) o;
        return serviceId == service.serviceId;
    }
    
    @Override
    public int hashCode() {
        return Integer.hashCode(serviceId);
    }
}
